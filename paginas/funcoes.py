import streamlit as st
import time
import pandas as pd
import numpy as np
import google.generativeai as genai
import io
import json
from google import genai
from google.genai import types

@st.dialog('üìù Adicionar Novas Vari√°veis', width='large')
def adicionar_variavel():
    """
    Formul√°rio dentro de um di√°logo para o usu√°rio adicionar at√© 4 vari√°veis,
    especificando nome, descri√ß√£o e tipo para cada uma.
    A submiss√£o s√≥ √© permitida se pelo menos uma vari√°vel for nomeada.
    """
        # --- O Formul√°rio ---
    with st.form(key="variaveis_form"):
        st.write("Preencha os campos para as vari√°veis que deseja extrair. Deixe o nome em branco para ignorar a linha.")
        st.divider()

        OPCOES_TIPO = ["Texto", "N√∫mero sem casas decimais", "N√∫mero com casas decimais"]

        # Loop para criar 5 linhas de inputs para as vari√°veis
        for i in range(4):
            col1, col2 = st.columns([1, 2])
            with col1:
                st.text_input(label=f'Nome da Vari√°vel {i+1}', key=f'nome_{i}')
                st.selectbox(label='Formato', options=OPCOES_TIPO, key=f'tipo_{i}')
            with col2:
                st.text_area(label='Descri√ß√£o', key=f'descricao_{i}', height=150)
            st.divider()

        # --- O SELETOR DE A√á√ÉO ---
        acao = st.radio(
            "Ap√≥s adicionar, o que voc√™ deseja fazer?",
            ("Adicionar e continuar preenchendo", "Concluir e voltar para a tela inicial"),
            key="acao_escolhida",
            horizontal=True, width='stretch'
        )

        # --- BOT√ÉO √öNICO DE SUBMISS√ÉO ---
        submitted = st.form_submit_button("Prosseguir", use_container_width=True)

    # --- L√ìGICA AP√ìS A SUBMISS√ÉO ---
    if submitted:
        variaveis_coletadas = []
        pelo_menos_uma_preenchida = False
        
        # Coleta os dados de todas as linhas preenchidas
        for i in range(4):
            nome_variavel = st.session_state[f'nome_{i}']
            if nome_variavel:
                pelo_menos_uma_preenchida = True
                variavel = {
                    'nome': nome_variavel,
                    'descricao': st.session_state[f'descricao_{i}'],
                    'tipo': st.session_state[f'tipo_{i}']
                }
                variaveis_coletadas.append(variavel)

        # Valida√ß√£o: verifica se pelo menos uma foi preenchida
        if not pelo_menos_uma_preenchida:
            st.error("Erro: Voc√™ deve preencher o nome de pelo menos uma vari√°vel.")
        else:
            # Adiciona as vari√°veis coletadas √† lista principal na sess√£o
            st.session_state.lista_de_variaveis.extend(variaveis_coletadas)
            
            acao_selecionada = st.session_state.acao_escolhida

            if acao_selecionada == "Adicionar e continuar preenchendo":
                st.success(f"{len(variaveis_coletadas)} vari√°vel(is) adicionada(s)! Preencha os campos novamente para adicionar mais vari√°veis.")
                # O script continua e o formul√°rio permanece na tela

            elif acao_selecionada == "Concluir e voltar para a tela inicial":
                st.success("A√ß√£o conclu√≠da!")
                with st.spinner("Voltando para a tela inicial..."):
                    time.sleep(1)
                st.rerun()

# def estruturador(texto, variaveis):
#   """
#   Extrai informa√ß√µes estruturadas de um texto potencialmente contendo **m√∫ltiplos indiv√≠duos**,
#   pedindo ao modelo generativo que retorne um *array* JSON onde cada item representa um indiv√≠duo
#   com os campos definidos pelo schema din√¢mico gerado via pydantic


#   comportamento principal
#   - monta dinamicamente um schema Pydantic (`DynamicSchema`) a partir de `variaveis`
#   - constr√≥i um prompt m√≠nimo que instrui o modelo a retornar **uma lista** (array) de objetos
#   obedecendo ao schema, cada objeto representando um indiv√≠duo
#   - configura o `generation_config` para esperar `application/json` e `response_schema=list[DynamicSchema]`
#   - retorna `response.text` (string JSON) com o array de indiv√≠duos, cabe ao chamador fazer o parse


#   par√¢metros
#   - texto (str): texto bruto proveniente de documentos, pode conter zero, um ou v√°rios indiv√≠duos
#   - variaveis (list[dict]): lista de dicion√°rios com pelo menos as chaves:
#   - 'nome' (str): nome do campo que aparecer√° no schema e na sa√≠da JSON
#   - 'descricao' (str): (opcional) descri√ß√£o do campo ‚Äî nesta vers√£o ela n√£o √© enviada ao prompt
#   - 'tipo' (str): tipo esperado: 'string', 'integer', 'float' ou 'boolean' (default 'string')


#   requisitos/assun√ß√µes
#   - existe um cliente `genai` configurado globalmente e uma vari√°vel `api_key` dispon√≠vel
#   - `create_model` do pydantic est√° dispon√≠vel (importado no topo deste arquivo)
#   - o modelo generativo suporta `response_schema` e aceita `list[DynamicSchema]` como sa√≠da estruturada


#   retorno
#   - str: conte√∫do bruto retornado pelo modelo (geralmente um JSON array). Ex.:
#   '[{"nome": "Jo√£o", "cpf": "..."}, {"nome": "Maria", "cpf": "..."}]'
#   recomenda-se chamar `json.loads(response.text)` no chamador para obter a lista de objetos


#   notas importantes / boas pr√°ticas
#   - o prompt √© propositalmente enxuto, n√£o reenvie a descri√ß√£o das vari√°veis no corpo do prompt,
#   pois o schema j√° descreve os campos e descri√ß√µes longas aumentam o custo de tokens
#   - para permitir rastreabilidade, instru√≠mos o modelo a incluir `nomes_alternativos` e `source_snippet`
#   em cada objeto, caso queira trocar `source_snippet` por offsets (start/end) basta ajustar o texto do prompt
#   - se o texto for muito grande, implemente pr√©-processamento local (chunking / sele√ß√£o por par√°grafos)
#   para reduzir tokens antes da chamada, ou envie apenas blocos candidatos
#   - depende da qualidade do modelo: para evitar duplicatas/erros pe√ßa no prompt que o modelo
#   una men√ß√µes repetidas num √∫nico objeto e liste varia√ß√µes em `nomes_alternativos`


#   exemplo de uso (resumo, sem c√≥digo de rede):
#   1) defina `variaveis = [{'nome':'nome','tipo':'string'},{'nome':'cpf','tipo':'string'}]
#   2) chame `resp = modelo_google(texto, variaveis)`
#   3) em seguida: `data = json.loads(resp)` -> `data` ser√° uma lista de dicion√°rios


#   limita√ß√µes
#   - o LLM pode alucinar valores ausentes, portanto sempre valide os campos cr√≠ticos (ex.: cpf)
#   comparando com o `source_snippet` retornado
#   - se o texto cont√©m muitos indiv√≠duos, controle o tamanho da sa√≠da e o custo limitando
#   o n√∫mero m√°ximo pedido ao modelo via instru√ß√µes adicionais no prompt


#   changelog / vers√£o
#   - v1.0: documentado, resposta em array de objetos (m√∫ltiplos indiv√≠duos)


#   """


#   instrucoes_prompt = f"""
#   Voc√™ √© um especialista em extra√ß√£o de dados que recebe um texto e o converte em um array JSON de indiv√≠duos.

#   **REGRAS DE INTERPRETA√á√ÉO DO TEXTO DE ENTRADA:**
#   O texto fornecido pode ser texto corrido, em formato Markdown, ou uma combina√ß√£o de ambos.
#   1.  **Se o texto for uma tabela Markdown:** Considere que cada linha (ap√≥s o cabe√ßalho) representa um indiv√≠duo distinto. Os cabe√ßalhos da tabela podem ajudar a identificar os campos.
#   2.  **Se o texto for corrido (par√°grafos):** Procure por men√ß√µes a indiv√≠duos dentro da prosa.
#   3. Se o texto tiver uma se√ß√£o refer√™ncias, com estruturas do tipo ABNT ou outras, ignore.

#   **REGRAS PARA A SA√çDA JSON:**
#   Ap√≥s interpretar o texto, gere um √∫nico array JSON seguindo estas regras estritas:
#   - O array deve conter exatamente **um objeto por indiv√≠duo distinto** identificado.
#   - **Unicidade:** N√£o repita indiv√≠duos. Se a mesma pessoa (identificada por CPF, n√∫mero de processo ou nome normalizado) aparecer v√°rias vezes, una todas as informa√ß√µes em um √∫nico objeto JSON.
#   - **Campos:** Para cada objeto, inclua todos os campos solicitados pelo schema JSON.
#   - **Valores Ausentes:** Para campos cujas informa√ß√µes n√£o foram encontradas no texto, preencha o valor com a string "N√£o encontrado".
#   - **Formato:** Strings devem sempre iniciar com letra mai√∫scula.
#   - **Limite:** Retorne no m√°ximo 200 objetos.
#   - **Entidades:** Os indiv√≠duos a serem extra√≠dos s√£o sempre seres humanos.
#   - **Limpeza:** A sa√≠da final n√£o deve incluir s√≠mbolos de formata√ß√£o Markdown como `|` ou `---`.

#   --- TEXTO PARA AN√ÅLISE ---
#   {texto}
#   """


#   # 1. Mapeia os tipos de string para tipos reais do Python
#   type_mapping = {
#   'Texto': str,
#   'N√∫mero sem casas decimais': int,
#   'N√∫meros com casas decimais': float,
#   }


#   # 2. Prepara as defini√ß√µes dos campos para o Pydantic
#   field_definitions = {}
#   for var in variaveis:
#     nome = var['nome']
#     descricao = var.get('descricao', f'Informa√ß√£o sobre {nome}')
#     tipo_py = type_mapping.get(var.get('tipo', 'string').lower(), str)
#     # A tupla (tipo, ...) significa que o campo e obrigatorio.
#     field_definitions[nome] = (tipo_py, Field(..., description=descricao))


#   # 3. Usa create_model do Pydantic para criar a classe do schema
#   DynamicSchema = create_model('DynamicSchema', **field_definitions)


#   print(f"Enviando {len(texto)} caracteres para a API para estrutura√ß√£o.")
#   # configuracao e chamada ao modelo
#   genai.configure(api_key=st.secrets['GEMINI_API_KEY_2'])
#   model = genai.GenerativeModel('gemini-2.5-flash')


#   generation_config = genai.GenerationConfig(
#   response_mime_type='application/json',
#   response_schema=list[DynamicSchema], # agora esperamos um array de objetos (varios individuos)
#   temperature=0.0
#   )


#   response = model.generate_content(
#   instrucoes_prompt,
#   generation_config=generation_config
#   )


#   return json.loads(response.text)          

# def extrator_texto(caminho_arquivo, imagem : str):

#   # caso 1: tentativa de extracao direta de texto
#   if imagem == 'texto':
#     pagina_texto = ''
#     try:
#         leitor = PyPDF2.PdfReader(caminho_arquivo)
#         for pagina in leitor.pages:
#             texto = pagina.extract_text() or ''
#             pagina_texto += texto
#       # caso contr√°rio, caimos para o fluxo de imagens (scanned)
#         return pagina_texto
#     except Exception as e:
#     # se falhar qualquer coisa, prosseguimos para o fluxo de imagens
#         print(f"Erro na extra√ß√£o via PyPDF2: {e}")

#   elif imagem == 'texto/imagens':
#     numero_da_pagina_com_imagem = []
#     limiar_texto = 280

#     try:
#         leitor = PyPDF2.PdfReader(caminho_arquivo)
#         total_paginas = len(leitor.pages)
#         pagina_apenas_texto = ['-'] * total_paginas

#         caminho_arquivo.seek(0)
#         doc_fitz = fitz.open(stream=caminho_arquivo.read(),filetype='pdf')
#         numero_da_pagina = 0
        
#         with st.status(label = 'Processando o PDF...', expanded = False):
#             for pagina in leitor.pages:
#                 texto = pagina.extract_text()
#                 if len(texto.strip()) > limiar_texto:
#                     pagina_apenas_texto[numero_da_pagina] = (f'P√°gina {numero_da_pagina+1}: {texto}')
#                     st.write(f'(PyPDF2) Texto da P√°gina {numero_da_pagina+1} extra√≠da com sucesso.')
#                 else:
#                             # Usar fitz aqui para verificar se cont√©m imagem. Se conter imagem, marca o n√∫mero da p√°gina. Se n√£o, deixa o conte√∫do de texto extra√≠do mesmo.
#                     pagina_fitz = doc_fitz.load_page(numero_da_pagina)
#                     if pagina_fitz.get_images(full=True):
#                         st.write(f'(Fitz) P√°gina {numero_da_pagina+1} tem pouco texto E cont√©m imagem. Marcando para OCR.')
#                         numero_da_pagina_com_imagem.append(numero_da_pagina)
#                     else:
#                         # Se n√£o cont√©m imagens, √© apenas uma p√°gina com pouco texto (ex: folha de rosto, etc).
#                         # Nesse caso, mantemos o pouco texto que foi extra√≠do.
#                         st.write(f'(Fitz) P√°gina {numero_da_pagina+1} tem pouco texto mas N√ÉO cont√©m imagem. Mantendo texto original.')
#                         pagina_apenas_texto[numero_da_pagina] = (f'P√°gina {numero_da_pagina+1}: {texto}')

#                 numero_da_pagina += 1
#             print(f"PyPDF2 encontrou {numero_da_pagina} p√°ginas no total.")
#             print(f"P√°ginas marcadas para OCR: {numero_da_pagina_com_imagem}")
#     except Exception as e:
#         print(f"Erro na leitura via PyPDF2: {e}")
#         return 'N√£o foi poss√≠vel ler o arquivo.'

#     if numero_da_pagina_com_imagem: 
#         genai.configure(api_key = st.secrets['GEMINI_API_KEY'])
#         model = genai.GenerativeModel('gemini-2.5-flash')

#         for indice in numero_da_pagina_com_imagem:
#             pagina_fitz_imagem = doc_fitz.load_page(indice)
#             pix = pagina_fitz_imagem.get_pixmap(dpi=300)
#             img_bytes=pix.tobytes(output='jpeg')
#             buf = io.BytesIO(img_bytes)
#         #     prompt_para_pagina = f"""
#         # Voc√™ √© um analista de layout de documentos e um especialista em OCR. Sua tarefa √© interpretar a estrutura de uma p√°gina e, em seguida, transcrev√™-la com precis√£o absoluta. O documento est√° em portugu√™s do Brasil (pt-BR).

#         # Siga este processo de dois passos:

#         # **Passo 1: An√°lise Estrutural (Rascunho Mental)**
#         # Primeiro, identifique todos os blocos de conte√∫do distintos na p√°gina e sua ordem de leitura l√≥gica. Os blocos podem ser: T√≠tulos, Par√°grafos, Listas, Tabelas, Imagens com Legendas, Cabe√ßalhos, Rodap√©s, etc.

#         # **Passo 2: Transcri√ß√£o Fiel**
#         # Segundo, transcreva cada bloco que voc√™ identificou, na ordem correta, aplicando as regras de formata√ß√£o abaixo.

#         # **REGRAS DE TRANSCRI√á√ÉO:**

#         # 1.  **Fidelidade ao Original:** N√£o corrija erros, n√£o complete frases e n√£o adivinhe palavras. Se um trecho for ileg√≠vel, use o marcador `[ILEG√çVEL]`.
#         # 2.  **Texto Comum (T√≠tulos, Par√°grafos, Listas):** Transcreva como texto simples, usando quebras de linha para separar os par√°grafos.
#         # 3.  **Tabelas:** Para blocos identificados como tabelas, use o formato **Markdown**:
#         #     a. Preserve rigorosamente a estrutura de linhas e colunas. Uma linha na imagem √© uma linha no Markdown.
#         #     b. Mantenha as c√©lulas vazias.
#         #     c. Mantenha a ordem exata das colunas.
#         # 4. Se identificar uma se√ß√£o "refer√™ncias", n√£o transcreva essa se√ß√£o.

#         # **FORMATO FINAL:**
#         # Sua sa√≠da final deve conter apenas a transcri√ß√£o do Passo 2. N√£o inclua sua an√°lise do Passo 1 nem qualquer outro coment√°rio.
#         # """
#             prompt_para_pagina= f'''voc√™ √© um analista de layout de documentos e especialista em ocr, o documento est√° em portugu√™s do brasil (pt-br)
# Voc√™ n√£o deve interpretar, resumir ou gerar conte√∫do. Sua tarefa √© transcrever o texto da imagem fornecida com precis√£o absoluta. Sua √∫nica fun√ß√£o √© agir como um servi√ßo de OCR.
# objetivo
# - identificar os blocos de conte√∫do da p√°gina e transcrever a p√°gina **em formato markdown**, fiel ao original, sem coment√°rios extras

# regras gerais
# 1) responda **apenas** com a transcri√ß√£o em markdown, n√£o inclua a an√°lise do passo 1 nem qualquer meta-coment√°rio  
# 2) mantenha fidelidade total ao texto, n√£o corrija nada, n√£o complete frases, se um trecho estiver ileg√≠vel escreva exatamente: [ILEG√çVEL]  
# 3) preserve quebras de linha e ordem dos blocos tal qual a leitura da p√°gina  
# 4) n√£o transcreva se√ß√µes marcadas como "refer√™ncias"  
# 5) para imagens insira um marcador no ponto correspondente: `![IMAGE]` opcionalmente com legenda entre par√™nteses, ex: `![IMAGE] (legenda da imagem)`  
# 6) tabelas devem ser convertidas para **markdown table** com pipes, preservando c√©lulas vazias e a ordem de colunas  
# 7) listas devem usar `-` para itens n√£o ordenados e `1.` `2.` para ordenadas, preservando a hierarquia  

# formato de sa√≠da (obrigat√≥rio)
# - use cabe√ßalhos `#`, `##` quando identificar t√≠tulos/subt√≠tulos  
# - par√°grafos como blocos de texto separados por linha em branco  
# - tabelas em markdown com linha de separador `| --- | --- |` mesmo que n√£o haja cabe√ßalho claro, preserve c√©lulas vazias  
# - imagens como `![IMAGE] (legenda opcional)` no local onde aparecem  
# - marque textos ileg√≠veis com `[ILEG√çVEL]` inline  

# exemplo m√≠nimo de sa√≠da esperada
# # T√≠tulo da P√°gina
# Par√°grafo inicial da p√°gina que pode ocupar mais de uma linha

# ## Subt√≠tulo
# - item de lista 1
# - item de lista 2

# | coluna 1 | coluna 2 | coluna 3 |
# | --- | --- | --- |
# | valor A | valor B |  |
# |  | valor D | valor E |

# ![IMAGE] (Legenda, se houver)

# fim, responda somente com a transcri√ß√£o em markdown, nada al√©m'''
#             # cada p√°gina √© uma lista de partes (imagem + instru√ß√£o textual)
#             conteudo_api = [
#                     {
#                         "mime_type": "image/jpeg",
#                         "data": buf.getvalue()
#                     },
#                     {
#                         "text": prompt_para_pagina
#                     }
#                 ]
#             try:
#                 response = model.generate_content(contents=conteudo_api,
#                 safety_settings={
#                         'HARM_CATEGORY_HARASSMENT': 'BLOCK_NONE',
#                         'HARM_CATEGORY_HATE_SPEECH': 'BLOCK_NONE',
#                         'HARM_CATEGORY_SEXUALLY_EXPLICIT': 'BLOCK_NONE',
#                         'HARM_CATEGORY_DANGEROUS_CONTENT': 'BLOCK_NONE'
#                     }
#                 )
#                 if response.candidates:
#                     pagina_apenas_texto[indice] = f'P√°gina {indice + 1}: {response.text}'
#                     print(f'Texto da P√°gina com imagem (n¬∞{indice + 1}) extra√≠do com sucesso.')
#                 print('Aguardando 13 segundos para pr√≥xima chamada...')
#                 time.sleep(13)
#             except Exception as e:
#                 print(f'Erro na chamada do modelo para extrair texto da p√°gina {indice + 1}: {e}')
#                 continue

#         doc_fitz.close()
#     resultado_final = '\n\n'.join(pagina_apenas_texto)
#     return resultado_final


#   else:
#     # caso 2: tratar cada p√°gina como imagem e enviar para a Gemini (API genai)
#     # renderiza as paginas como imagens (necessita pdf2image/poppler)
#     file_bytes = caminho_arquivo.getvalue()
#     images = convert_from_bytes(file_bytes, dpi=300)


#     # inicializa o cliente
#     genai.configure(api_key=st.secrets['GEMINI_API_KEY'])
#     model = genai.GenerativeModel('gemini-2.5-flash')

#     # string final
#     resultado = ''

#     for idx, img in enumerate(images):
#         # converte PIL image para bytes jpeg
#         buf = io.BytesIO()
#         img.save(buf, format='JPEG', quality=95)
#         img_bytes = buf.getvalue()
#         prompt_para_pagina = f"""
#     Voc√™ √© um analista de layout de documentos e um especialista em OCR. Sua tarefa √© interpretar a estrutura de uma p√°gina e, em seguida, transcrev√™-la com precis√£o absoluta. O documento est√° em portugu√™s do Brasil (pt-BR).

#     Siga este processo de dois passos:

#     **Passo 1: An√°lise Estrutural (Rascunho Mental)**
#     Primeiro, identifique todos os blocos de conte√∫do distintos na p√°gina e sua ordem de leitura l√≥gica. Os blocos podem ser: T√≠tulos, Par√°grafos, Listas, Tabelas, Imagens com Legendas, Cabe√ßalhos, Rodap√©s, etc.

#     **Passo 2: Transcri√ß√£o Fiel**
#     Segundo, transcreva cada bloco que voc√™ identificou, na ordem correta, aplicando as regras de formata√ß√£o abaixo.

#     **REGRAS DE TRANSCRI√á√ÉO:**

#     1.  **Fidelidade ao Original:** N√£o corrija erros, n√£o complete frases e n√£o adivinhe palavras. Se um trecho for ileg√≠vel, use o marcador `[ILEG√çVEL]`.
#     2.  **Texto Comum (T√≠tulos, Par√°grafos, Listas):** Transcreva como texto simples, usando quebras de linha para separar os par√°grafos.
#     3.  **Tabelas:** Para blocos identificados como tabelas, use o formato **Markdown**:
#         a. Preserve rigorosamente a estrutura de linhas e colunas. Uma linha na imagem √© uma linha no Markdown.
#         b. Mantenha as c√©lulas vazias.
#         c. Mantenha a ordem exata das colunas.
#     4. Se identificar uma se√ß√£o "refer√™ncias", n√£o transcreva essa se√ß√£o.

#     **FORMATO FINAL:**
#     Sua sa√≠da final deve conter apenas a transcri√ß√£o do Passo 2. N√£o inclua sua an√°lise do Passo 1 nem qualquer outro coment√°rio.
#     """

#         # cada p√°gina √© uma lista de partes (imagem + instru√ß√£o textual)
#         conteudo_api = [
#                   {
#                       "mime_type": "image/jpeg",
#                       "data": buf.getvalue()
#                   },
#                   {
#                       "text": prompt_para_pagina
#                   }
#               ]

#         response = model.generate_content(conteudo_api)
#         if response.candidates:
#           resultado += response.candidates[0].content.parts[0].text


#     # retornamos o objeto response bruto para que o chamador processe conforme preferir
#     return resultado

def estruturador_atualizado(pdf, variaveis):
    esquema = {
    "type": "ARRAY",
    "items": {
      "type": "OBJECT",
      "properties": {
        # Este dicion√°rio come√ßar√° vazio
      },
      "required": [
        # Esta lista come√ßar√° vazia
      ]
    }
    }

    for var in variaveis:
      nome = var['nome']
      tipo = 'STRING' if var['tipo'] == 'Texto' else 'NUMBER'
      descricao = var['descricao']
      esquema['items']['properties'][nome] = {
          'type': tipo,
          'description': descricao
      }
      
      esquema['items']['required'].append(nome)


    # Modelo ---------------

    client = genai.Client(api_key = 'AIzaSyDon5TniEuUX-rYbjZncnhg2mQMfj1k_TQ')

    prompt = """Voc√™ √© um assistente de IA especialista em extra√ß√£o de dados de documentos. Sua tarefa √© analisar o documento fornecido para extrair informa√ß√µes sobre um √∫nico indiv√≠du√≠duo, formatando a sa√≠da como um √∫nico objeto JSON que segue estritamente o schema fornecido.
    REGRAS DE INTERPRETA√á√ÉO DO DOCUMENTO:
    -Foco Principal: O objetivo √© encontrar todas as informa√ß√µes sobre o indiv√≠duo principal do documento. Re√∫na dados de todas as partes relevantes para construir um perfil completo.
    -Fontes de Dados: Analise tanto as tabelas quanto os par√°grafos para coletar os dados. As informa√ß√µes podem estar espalhadas por todo o documento.
    -Associa√ß√£o de Dados: Utilize os cabe√ßalhos das tabelas e o contexto do texto para associar corretamente as informa√ß√µes aos campos do schema.
    -Exclus√£o: Ignore informa√ß√µes gen√©ricas de cabe√ßalhos, rodap√©s e se√ß√µes de refer√™ncias bibliogr√°ficas do documento.

    REGRAS DE GERA√á√ÉO DO OBJETO JSON:
    -Estrutura da Sa√≠da: A sa√≠da deve ser um √∫nico objeto JSON, n√£o um array.
    -Valores Ausentes: Se uma informa√ß√£o para um campo do schema n√£o for encontrada no documento, o valor para esse campo deve ser a string "N√£o encontrado".
    -Formata√ß√£o de Strings: Todas as strings no JSON final devem iniciar com letra mai√∫scula.
    -Limpeza do Conte√∫do: O conte√∫do extra√≠do deve ser limpo, sem conter caracteres de formata√ß√£o (como Markdown |, ---, *, etc.).
        """

    response = client.models.generate_content(
        model = 'gemini-2.5-flash',
        contents = [
            types.Part.from_bytes(
                data = pdf,
                mime_type = 'application/pdf'
            ),
            prompt
        ],
        config = {
            'response_mime_type': 'application/json',
            'response_schema': esquema
        }
    )


    return json.loads(response.text) 