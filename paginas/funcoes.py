import streamlit as st
import time
import pandas as pd
import numpy as np
import PyPDF2
import google.generativeai as genai
import io
import json
from pydantic import create_model
from pdf2image import convert_from_bytes

@st.dialog('üìù Adicionar Novas Vari√°veis', width='large')
def adicionar_variavel():
    """
    Formul√°rio dentro de um di√°logo para o usu√°rio adicionar at√© 5 vari√°veis,
    especificando nome, descri√ß√£o e tipo para cada uma.
    A submiss√£o s√≥ √© permitida se pelo menos uma vari√°vel for nomeada.
    """
        # --- O Formul√°rio ---
    with st.form(key="variaveis_form"):
        st.write("Preencha os campos para as vari√°veis que deseja extrair. Deixe o nome em branco para ignorar a linha.")
        st.divider()

        OPCOES_TIPO = ["Texto", "N√∫mero sem casas decimais", "N√∫mero com casas decimais"]

        # Loop para criar 5 linhas de inputs para as vari√°veis
        for i in range(5):
            col1, col2 = st.columns([1, 2])
            with col1:
                st.text_input(label=f'Nome da Vari√°vel {i+1}', key=f'nome_{i}')
                st.selectbox(label='Formato', options=OPCOES_TIPO, key=f'tipo_{i}')
            with col2:
                st.text_area(label='Descri√ß√£o', key=f'descricao_{i}', height=150)
            st.divider()

        # --- O SELETOR DE A√á√ÉO ---
        acao = st.radio(
            "Ap√≥s adicionar, o que voc√™ deseja fazer?",
            ("Adicionar e continuar preenchendo", "Concluir e voltar para a tela inicial"),
            key="acao_escolhida",
            horizontal=True, width='stretch'
        )

        # --- BOT√ÉO √öNICO DE SUBMISS√ÉO ---
        submitted = st.form_submit_button("Prosseguir", use_container_width=True)

    # --- L√ìGICA AP√ìS A SUBMISS√ÉO ---
    if submitted:
        variaveis_coletadas = []
        pelo_menos_uma_preenchida = False
        
        # Coleta os dados de todas as linhas preenchidas
        for i in range(5):
            nome_variavel = st.session_state[f'nome_{i}']
            if nome_variavel:
                pelo_menos_uma_preenchida = True
                variavel = {
                    'nome': nome_variavel,
                    'descricao': st.session_state[f'descricao_{i}'],
                    'tipo': st.session_state[f'tipo_{i}']
                }
                variaveis_coletadas.append(variavel)

        # Valida√ß√£o: verifica se pelo menos uma foi preenchida
        if not pelo_menos_uma_preenchida:
            st.error("Erro: Voc√™ deve preencher o nome de pelo menos uma vari√°vel.")
        else:
            # Adiciona as vari√°veis coletadas √† lista principal na sess√£o
            st.session_state.lista_de_variaveis.extend(variaveis_coletadas)
            
            acao_selecionada = st.session_state.acao_escolhida

            if acao_selecionada == "Adicionar e continuar preenchendo":
                st.success(f"{len(variaveis_coletadas)} vari√°vel(is) adicionada(s)! Os campos foram mantidos caso queira edit√°-los ou pode preencher os campos vazios para adicionar mais.")
                # O script continua e o formul√°rio permanece na tela

            elif acao_selecionada == "Concluir e voltar para a tela inicial":
                # Para fechar o "di√°logo" e atualizar a tela principal, usamos o rerun
                # (Em um st.dialog(), isso fecharia o popup)
                st.success("A√ß√£o conclu√≠da!")
                with st.spinner("Voltando para a tela inicial..."):
                    time.sleep(1)
                st.rerun()

def estruturador(texto, variaveis):
  """
  Extrai informa√ß√µes estruturadas de um texto potencialmente contendo **m√∫ltiplos indiv√≠duos**,
  pedindo ao modelo generativo que retorne um *array* JSON onde cada item representa um indiv√≠duo
  com os campos definidos pelo schema din√¢mico gerado via pydantic


  comportamento principal
  - monta dinamicamente um schema Pydantic (`DynamicSchema`) a partir de `variaveis`
  - constr√≥i um prompt m√≠nimo que instrui o modelo a retornar **uma lista** (array) de objetos
  obedecendo ao schema, cada objeto representando um indiv√≠duo
  - configura o `generation_config` para esperar `application/json` e `response_schema=list[DynamicSchema]`
  - retorna `response.text` (string JSON) com o array de indiv√≠duos, cabe ao chamador fazer o parse


  par√¢metros
  - texto (str): texto bruto proveniente de documentos, pode conter zero, um ou v√°rios indiv√≠duos
  - variaveis (list[dict]): lista de dicion√°rios com pelo menos as chaves:
  - 'nome' (str): nome do campo que aparecer√° no schema e na sa√≠da JSON
  - 'descricao' (str): (opcional) descri√ß√£o do campo ‚Äî nesta vers√£o ela n√£o √© enviada ao prompt
  - 'tipo' (str): tipo esperado: 'string', 'integer', 'float' ou 'boolean' (default 'string')


  requisitos/assun√ß√µes
  - existe um cliente `genai` configurado globalmente e uma vari√°vel `api_key` dispon√≠vel
  - `create_model` do pydantic est√° dispon√≠vel (importado no topo deste arquivo)
  - o modelo generativo suporta `response_schema` e aceita `list[DynamicSchema]` como sa√≠da estruturada


  retorno
  - str: conte√∫do bruto retornado pelo modelo (geralmente um JSON array). Ex.:
  '[{"nome": "Jo√£o", "cpf": "..."}, {"nome": "Maria", "cpf": "..."}]'
  recomenda-se chamar `json.loads(response.text)` no chamador para obter a lista de objetos


  notas importantes / boas pr√°ticas
  - o prompt √© propositalmente enxuto, n√£o reenvie a descri√ß√£o das vari√°veis no corpo do prompt,
  pois o schema j√° descreve os campos e descri√ß√µes longas aumentam o custo de tokens
  - para permitir rastreabilidade, instru√≠mos o modelo a incluir `nomes_alternativos` e `source_snippet`
  em cada objeto, caso queira trocar `source_snippet` por offsets (start/end) basta ajustar o texto do prompt
  - se o texto for muito grande, implemente pr√©-processamento local (chunking / sele√ß√£o por par√°grafos)
  para reduzir tokens antes da chamada, ou envie apenas blocos candidatos
  - depende da qualidade do modelo: para evitar duplicatas/erros pe√ßa no prompt que o modelo
  una men√ß√µes repetidas num √∫nico objeto e liste varia√ß√µes em `nomes_alternativos`


  exemplo de uso (resumo, sem c√≥digo de rede):
  1) defina `variaveis = [{'nome':'nome','tipo':'string'},{'nome':'cpf','tipo':'string'}]
  2) chame `resp = modelo_google(texto, variaveis)`
  3) em seguida: `data = json.loads(resp)` -> `data` ser√° uma lista de dicion√°rios


  limita√ß√µes
  - o LLM pode alucinar valores ausentes, portanto sempre valide os campos cr√≠ticos (ex.: cpf)
  comparando com o `source_snippet` retornado
  - se o texto cont√©m muitos indiv√≠duos, controle o tamanho da sa√≠da e o custo limitando
  o n√∫mero m√°ximo pedido ao modelo via instru√ß√µes adicionais no prompt


  changelog / vers√£o
  - v1.0: documentado, resposta em array de objetos (m√∫ltiplos indiv√≠duos)


  """


  instrucoes_prompt = f"""
  Voc√™ √© um especialista em extra√ß√£o de dados que recebe um texto e o converte em um array JSON de indiv√≠duos.

  **REGRAS DE INTERPRETA√á√ÉO DO TEXTO DE ENTRADA:**
  O texto fornecido pode ser texto corrido, uma tabela em formato Markdown, ou uma combina√ß√£o de ambos.
  1.  **Se o texto for uma tabela Markdown:** Considere que cada linha (ap√≥s o cabe√ßalho) representa um indiv√≠duo distinto. Os cabe√ßalhos da tabela podem ajudar a identificar os campos.
  2.  **Se o texto for corrido (par√°grafos):** Procure por men√ß√µes a indiv√≠duos dentro da prosa.

  **REGRAS PARA A SA√çDA JSON:**
  Ap√≥s interpretar o texto, gere um √∫nico array JSON seguindo estas regras estritas:
  - O array deve conter exatamente **um objeto por indiv√≠duo distinto** identificado.
  - **Unicidade:** N√£o repita indiv√≠duos. Se a mesma pessoa (identificada por CPF, n√∫mero de processo ou nome normalizado) aparecer v√°rias vezes, una todas as informa√ß√µes em um √∫nico objeto JSON.
  - **Campos:** Para cada objeto, inclua todos os campos solicitados pelo schema JSON.
  - **Valores Ausentes:** Para campos cujas informa√ß√µes n√£o foram encontradas no texto, preencha o valor com a string "N√£o encontrado".
  - **Formato:** Strings devem sempre iniciar com letra mai√∫scula.
  - **Limite:** Retorne no m√°ximo 200 objetos.
  - **Entidades:** Os indiv√≠duos a serem extra√≠dos s√£o sempre seres humanos.
  - **Limpeza:** A sa√≠da final n√£o deve incluir s√≠mbolos de formata√ß√£o Markdown como `|` ou `---`.

  --- TEXTO PARA AN√ÅLISE ---
  {texto}
  """


  # 1. Mapeia os tipos de string para tipos reais do Python
  type_mapping = {
  'string': str,
  'integer': int,
  'float': float,
  'boolean': bool
  }


  # 2. Prepara as defini√ß√µes dos campos para o Pydantic
  field_definitions = {}
  for var in variaveis:
    nome = var['nome']
    tipo_py = type_mapping.get(var.get('tipo', 'string').lower(), str)
    # A tupla (tipo, ...) significa que o campo e obrigatorio.
    field_definitions[nome] = (tipo_py, ...)


  # 3. Usa create_model do Pydantic para criar a classe do schema
  DynamicSchema = create_model('DynamicSchema', **field_definitions)


  # configuracao e chamada ao modelo
  genai.configure(api_key=st.secrets['GEMINI_API_KEY'])
  model = genai.GenerativeModel('gemini-2.5-flash')


  generation_config = genai.GenerationConfig(
  response_mime_type='application/json',
  response_schema=list[DynamicSchema], # agora esperamos um array de objetos (varios individuos)
  temperature=0.0
  )


  response = model.generate_content(
  instrucoes_prompt,
  generation_config=generation_config
  )


  return pd.DataFrame(json.loads(response.text))          

def extrator_texto(caminho_arquivo, imagem : str):

  # caso 1: tentativa de extracao direta de texto
  if imagem == 'texto':
    pagina_texto = ''
    try:
        leitor = PyPDF2.PdfReader(pdf)
        for pagina in leitor.pages:
            texto = pagina.extract_text() or ''
            pagina_texto += texto
      # caso contr√°rio, caimos para o fluxo de imagens (scanned)
        return pagina_texto
    except Exception as e:
    # se falhar qualquer coisa, prosseguimos para o fluxo de imagens
        print(f"Erro na extra√ß√£o via PyPDF2: {e}")


  else:
    # caso 2: tratar cada p√°gina como imagem e enviar para a Gemini (API genai)
    # renderiza as paginas como imagens (necessita pdf2image/poppler)
    file_bytes = caminho_arquivo.getvalue()
    images = convert_from_bytes(file_bytes, dpi=300)


    # inicializa o cliente
    genai.configure(api_key=st.secrets['GEMINI_API_KEY'])
    model = genai.GenerativeModel('gemini-2.5-flash')

    # string final
    resultado = ''

    for idx, img in enumerate(images):
        # converte PIL image para bytes jpeg
        buf = io.BytesIO()
        img.save(buf, format='JPEG', quality=95)
        img_bytes = buf.getvalue()
        prompt_para_pagina = f"""
    Voc√™ √© um analista de layout de documentos e um especialista em OCR. Sua tarefa √© interpretar a estrutura de uma p√°gina e, em seguida, transcrev√™-la com precis√£o absoluta. O documento est√° em portugu√™s do Brasil (pt-BR).

    Siga este processo de dois passos:

    **Passo 1: An√°lise Estrutural (Rascunho Mental)**
    Primeiro, identifique todos os blocos de conte√∫do distintos na p√°gina e sua ordem de leitura l√≥gica. Os blocos podem ser: T√≠tulos, Par√°grafos, Listas, Tabelas, Imagens com Legendas, Cabe√ßalhos, Rodap√©s, etc.

    **Passo 2: Transcri√ß√£o Fiel**
    Segundo, transcreva cada bloco que voc√™ identificou, na ordem correta, aplicando as regras de formata√ß√£o abaixo.

    **REGRAS DE TRANSCRI√á√ÉO:**

    1.  **Fidelidade ao Original:** N√£o corrija erros, n√£o complete frases e n√£o adivinhe palavras. Se um trecho for ileg√≠vel, use o marcador `[ILEG√çVEL]`.
    2.  **Texto Comum (T√≠tulos, Par√°grafos, Listas):** Transcreva como texto simples, usando quebras de linha para separar os par√°grafos.
    3.  **Tabelas:** Para blocos identificados como tabelas, use o formato **Markdown**:
        a. Preserve rigorosamente a estrutura de linhas e colunas. Uma linha na imagem √© uma linha no Markdown.
        b. Mantenha as c√©lulas vazias.
        c. Mantenha a ordem exata das colunas.

    **FORMATO FINAL:**
    Sua sa√≠da final deve conter apenas a transcri√ß√£o do Passo 2. N√£o inclua sua an√°lise do Passo 1 nem qualquer outro coment√°rio.
    """

        # cada p√°gina √© uma lista de partes (imagem + instru√ß√£o textual)
        conteudo_api = [
                  {
                      "mime_type": "image/jpeg",
                      "data": buf.getvalue()
                  },
                  {
                      "text": prompt_para_pagina
                  }
              ]

        response = model.generate_content(conteudo_api)
        if response.candidates:
          resultado += response.candidates[0].content.parts[0].text


    # retornamos o objeto response bruto para que o chamador processe conforme preferir
    return resultado
